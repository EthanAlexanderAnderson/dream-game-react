{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\nvar debug = require('./debug');\nvar RedisClient = require('../').RedisClient;\nvar Command = require('./command');\nvar noop = function () {};\n\n/**********************************************\nAll documented and exposed API belongs in here\n**********************************************/\n\n// Redirect calls to the appropriate function and use to send arbitrary / not supported commands\nRedisClient.prototype.send_command = RedisClient.prototype.sendCommand = function (command, args, callback) {\n  // Throw to fail early instead of relying in order in this case\n  if (typeof command !== 'string') {\n    throw new TypeError('Wrong input type \"' + (command !== null && command !== undefined ? command.constructor.name : command) + '\" for command name');\n  }\n  command = command.toLowerCase();\n  if (!Array.isArray(args)) {\n    if (args === undefined || args === null) {\n      args = [];\n    } else if (typeof args === 'function' && callback === undefined) {\n      callback = args;\n      args = [];\n    } else {\n      throw new TypeError('Wrong input type \"' + args.constructor.name + '\" for args');\n    }\n  }\n  if (typeof callback !== 'function' && callback !== undefined) {\n    throw new TypeError('Wrong input type \"' + (callback !== null ? callback.constructor.name : 'null') + '\" for callback function');\n  }\n\n  // Using the raw multi command is only possible with this function\n  // If the command is not yet added to the client, the internal function should be called right away\n  // Otherwise we need to redirect the calls to make sure the internal functions don't get skipped\n  // The internal functions could actually be used for any non hooked function\n  // but this might change from time to time and at the moment there's no good way to distinguish them\n  // from each other, so let's just do it do it this way for the time being\n  if (command === 'multi' || typeof this[command] !== 'function') {\n    return this.internal_send_command(new Command(command, args, callback));\n  }\n  if (typeof callback === 'function') {\n    args = args.concat([callback]); // Prevent manipulating the input array\n  }\n\n  return this[command].apply(this, args);\n};\nRedisClient.prototype.end = function (flush) {\n  // Flush queue if wanted\n  if (flush) {\n    this.flush_and_error({\n      message: 'Connection forcefully ended and command aborted.',\n      code: 'NR_CLOSED'\n    });\n  } else if (arguments.length === 0) {\n    this.warn('Using .end() without the flush parameter is deprecated and throws from v.3.0.0 on.\\n' + 'Please check the doku (https://github.com/NodeRedis/node_redis) and explictly use flush.');\n  }\n  // Clear retry_timer\n  if (this.retry_timer) {\n    clearTimeout(this.retry_timer);\n    this.retry_timer = null;\n  }\n  this.stream.removeAllListeners();\n  this.stream.on('error', noop);\n  this.connected = false;\n  this.ready = false;\n  this.closing = true;\n  return this.stream.destroySoon();\n};\nRedisClient.prototype.unref = function () {\n  if (this.connected) {\n    debug(\"Unref'ing the socket connection\");\n    this.stream.unref();\n  } else {\n    debug('Not connected yet, will unref later');\n    this.once('connect', function () {\n      this.unref();\n    });\n  }\n};\nRedisClient.prototype.duplicate = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  var existing_options = utils.clone(this.options);\n  options = utils.clone(options);\n  for (var elem in options) {\n    existing_options[elem] = options[elem];\n  }\n  var client = new RedisClient(existing_options);\n  client.selected_db = options.db || this.selected_db;\n  if (typeof callback === 'function') {\n    var ready_listener = function () {\n      callback(null, client);\n      client.removeAllListeners(error_listener);\n    };\n    var error_listener = function (err) {\n      callback(err);\n      client.end(true);\n    };\n    client.once('ready', ready_listener);\n    client.once('error', error_listener);\n    return;\n  }\n  return client;\n};","map":{"version":3,"names":["utils","require","debug","RedisClient","Command","noop","prototype","send_command","sendCommand","command","args","callback","TypeError","undefined","constructor","name","toLowerCase","Array","isArray","internal_send_command","concat","apply","end","flush","flush_and_error","message","code","arguments","length","warn","retry_timer","clearTimeout","stream","removeAllListeners","on","connected","ready","closing","destroySoon","unref","once","duplicate","options","existing_options","clone","elem","client","selected_db","db","ready_listener","error_listener","err"],"sources":["C:/Users/Ethan/Desktop/Dream Game Site/v4/client/node_modules/redis/lib/extendedApi.js"],"sourcesContent":["'use strict';\n\nvar utils = require('./utils');\nvar debug = require('./debug');\nvar RedisClient = require('../').RedisClient;\nvar Command = require('./command');\nvar noop = function () {};\n\n/**********************************************\nAll documented and exposed API belongs in here\n**********************************************/\n\n// Redirect calls to the appropriate function and use to send arbitrary / not supported commands\nRedisClient.prototype.send_command = RedisClient.prototype.sendCommand = function (command, args, callback) {\n    // Throw to fail early instead of relying in order in this case\n    if (typeof command !== 'string') {\n        throw new TypeError('Wrong input type \"' + (command !== null && command !== undefined ? command.constructor.name : command) + '\" for command name');\n    }\n    command = command.toLowerCase();\n    if (!Array.isArray(args)) {\n        if (args === undefined || args === null) {\n            args = [];\n        } else if (typeof args === 'function' && callback === undefined) {\n            callback = args;\n            args = [];\n        } else {\n            throw new TypeError('Wrong input type \"' + args.constructor.name + '\" for args');\n        }\n    }\n    if (typeof callback !== 'function' && callback !== undefined) {\n        throw new TypeError('Wrong input type \"' + (callback !== null ? callback.constructor.name : 'null') + '\" for callback function');\n    }\n\n    // Using the raw multi command is only possible with this function\n    // If the command is not yet added to the client, the internal function should be called right away\n    // Otherwise we need to redirect the calls to make sure the internal functions don't get skipped\n    // The internal functions could actually be used for any non hooked function\n    // but this might change from time to time and at the moment there's no good way to distinguish them\n    // from each other, so let's just do it do it this way for the time being\n    if (command === 'multi' || typeof this[command] !== 'function') {\n        return this.internal_send_command(new Command(command, args, callback));\n    }\n    if (typeof callback === 'function') {\n        args = args.concat([callback]); // Prevent manipulating the input array\n    }\n    return this[command].apply(this, args);\n};\n\nRedisClient.prototype.end = function (flush) {\n    // Flush queue if wanted\n    if (flush) {\n        this.flush_and_error({\n            message: 'Connection forcefully ended and command aborted.',\n            code: 'NR_CLOSED'\n        });\n    } else if (arguments.length === 0) {\n        this.warn(\n            'Using .end() without the flush parameter is deprecated and throws from v.3.0.0 on.\\n' +\n            'Please check the doku (https://github.com/NodeRedis/node_redis) and explictly use flush.'\n        );\n    }\n    // Clear retry_timer\n    if (this.retry_timer) {\n        clearTimeout(this.retry_timer);\n        this.retry_timer = null;\n    }\n    this.stream.removeAllListeners();\n    this.stream.on('error', noop);\n    this.connected = false;\n    this.ready = false;\n    this.closing = true;\n    return this.stream.destroySoon();\n};\n\nRedisClient.prototype.unref = function () {\n    if (this.connected) {\n        debug(\"Unref'ing the socket connection\");\n        this.stream.unref();\n    } else {\n        debug('Not connected yet, will unref later');\n        this.once('connect', function () {\n            this.unref();\n        });\n    }\n};\n\nRedisClient.prototype.duplicate = function (options, callback) {\n    if (typeof options === 'function') {\n        callback = options;\n        options = null;\n    }\n    var existing_options = utils.clone(this.options);\n    options = utils.clone(options);\n    for (var elem in options) {\n        existing_options[elem] = options[elem];\n    }\n    var client = new RedisClient(existing_options);\n    client.selected_db = options.db || this.selected_db;\n    if (typeof callback === 'function') {\n        var ready_listener = function () {\n            callback(null, client);\n            client.removeAllListeners(error_listener);\n        };\n        var error_listener = function (err) {\n            callback(err);\n            client.end(true);\n        };\n        client.once('ready', ready_listener);\n        client.once('error', error_listener);\n        return;\n    }\n    return client;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}