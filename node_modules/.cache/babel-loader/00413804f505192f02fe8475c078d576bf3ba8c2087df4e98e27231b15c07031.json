{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ethan\\\\Desktop\\\\Dream Game Site\\\\v4\\\\src\\\\playerSection.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlayerSection(props) {\n  let name = props.name;\n  let scores = props.scores;\n  let stats = props.stats;\n  let status = props.status;\n  let PFPs = new Map();\n\n  //for (let i = 0; i < scores.length; i++) {\n  for (let j = 0; j < props.PFPs.length; j++) {\n    PFPs.set(props.PFPs[j][0], props.PFPs[j][1]);\n  }\n  //}\n  console.log(PFPs);\n\n  // TODO: clean this mess\n  let playerSection = [];\n  for (let i = 0; i < scores.length; i++) {\n    for (let j = 0; j < stats.length; j++) {\n      if (scores[i][1] === stats[j][0]) {\n        let correct = parseInt(stats[j][1]);\n        let incorrect = parseInt(stats[j][2]);\n        let ratio = (correct / (incorrect + correct + 0.00001) * 100).toFixed(2);\n        let longestStreak = parseInt(stats[j][3]);\n        let skillRating = (ratio * (correct / 10 + longestStreak)).toFixed(0);\n        let temp = scores[i];\n        temp[5] = skillRating;\n        playerSection.push(temp);\n      }\n    }\n  }\n  let colThree = \"\";\n  if (status === \"before\") {\n    colThree = \"Skill Rating\";\n    // sort by skill rating\n    playerSection.sort((a, b) => b[5] - a[5]);\n  } else if (status === \"during\") {\n    colThree = \"Status\";\n    // sort by score\n    playerSection.sort((a, b) => b[2] - a[2]);\n  } else if (status === \"after\") {\n    colThree = \"Guessed\";\n    // sort by score\n    playerSection.sort((a, b) => b[2] - a[2]);\n  } else {\n    colThree = \"Status\";\n  }\n\n  //console.log(PFPs);\n\n  if (!(name === \"\")) {\n    if (Array.isArray(playerSection)) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"playerSection\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Player\"\n              }, \"Player\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Scores\"\n              }, \"Scores\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: colThree\n              }, colThree, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 33\n              }, this)]\n            }, \"Header Row\", true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: playerSection.map((item, index) => {\n              // show ready (default)\n              let itemThree = item[3];\n              let scoreDiff = \"\";\n              let bonusArray = \"\";\n              if (status === \"after\") {\n                // show guess\n                itemThree = item[4];\n                // set score and bonus info\n                scoreDiff = item[2] - item[6] !== 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"scoreDiff\",\n                  children: [\"+\", item[2] - item[6]]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 79\n                }, this) : null;\n                bonusArray = item[7].map((bonus, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bonus\",\n                  children: [bonus[0], \" +\", bonus[1]]\n                }, bonus[0] + item[1], true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 80\n                }, this));\n              } else if (status === \"before\") {\n                // show skill rating\n                itemThree = item[5];\n              }\n              //PFPs.get(item[1])\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: PFPs.get(item[1])\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 64\n                  }, this), PFPs.get(item[1]), item[1]]\n                }, item[1] + \"name\", true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [item[2], \" \", scoreDiff, \" \", bonusArray]\n                }, item[1] + \"score\", true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: itemThree\n                }, item[1] + colThree, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 37\n                }, this)]\n              }, item[1] + \"Row\", true, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 33\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"ERROR: SCORES NOT ARRAY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 20\n      }, this);\n    }\n  }\n}\n_c = PlayerSection;\n;\nexport default PlayerSection;\nvar _c;\n$RefreshReg$(_c, \"PlayerSection\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PlayerSection","props","name","scores","stats","status","PFPs","Map","j","length","set","console","log","playerSection","i","correct","parseInt","incorrect","ratio","toFixed","longestStreak","skillRating","temp","push","colThree","sort","a","b","Array","isArray","id","children","className","scope","fileName","_jsxFileName","lineNumber","columnNumber","map","item","index","itemThree","scoreDiff","bonusArray","bonus","src","get","_c","$RefreshReg$"],"sources":["C:/Users/Ethan/Desktop/Dream Game Site/v4/src/playerSection.js"],"sourcesContent":["import React from \"react\";\r\n\r\nfunction PlayerSection(props) {\r\n\r\n    let name = props.name;\r\n    let scores = props.scores;\r\n    let stats = props.stats;\r\n    let status = props.status;\r\n    let PFPs = new Map();\r\n\r\n    //for (let i = 0; i < scores.length; i++) {\r\n    for (let j = 0; j < props.PFPs.length; j++) {\r\n        PFPs.set(props.PFPs[j][0], props.PFPs[j][1]);\r\n    }\r\n    //}\r\n    console.log(PFPs);\r\n\r\n    // TODO: clean this mess\r\n    let playerSection = [];\r\n    for (let i = 0; i < scores.length; i++) {\r\n        for (let j = 0; j < stats.length; j++) {\r\n            if (scores[i][1] === stats[j][0]){\r\n                let correct  = parseInt(stats[j][1]);\r\n                let incorrect = parseInt(stats[j][2]);\r\n                let ratio = ((correct/(incorrect+correct+0.00001))*100).toFixed(2);\r\n                let longestStreak = parseInt(stats[j][3]);\r\n                let skillRating = (ratio * ((correct/10) + longestStreak)).toFixed(0);\r\n                let temp = scores[i];\r\n                temp[5] = skillRating;\r\n                playerSection.push(temp);\r\n            }\r\n        }\r\n    }\r\n\r\n    let colThree = \"\";\r\n    if (status === \"before\") {\r\n        colThree = \"Skill Rating\"\r\n        // sort by skill rating\r\n        playerSection.sort((a, b) => b[5] - a[5]);\r\n    } else if (status === \"during\") {\r\n        colThree = \"Status\"\r\n        // sort by score\r\n        playerSection.sort((a, b) => b[2] - a[2]);\r\n    } else if (status === \"after\") {\r\n        colThree = \"Guessed\"\r\n        // sort by score\r\n        playerSection.sort((a, b) => b[2] - a[2]);\r\n    } else {\r\n        colThree = \"Status\"\r\n    }\r\n\r\n    //console.log(PFPs);\r\n\r\n    if (!(name === \"\")){\r\n        if (Array.isArray(playerSection)) { \r\n            return (\r\n                <div id=\"playerSection\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr key=\"Header Row\">\r\n                                <th key=\"Player\" scope=\"col\">Player</th>\r\n                                <th key={\"Scores\"} scope=\"col\">Scores</th>\r\n                                <th key={colThree} scope=\"col\">{colThree}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {playerSection.map((item, index) => {\r\n                                // show ready (default)\r\n                                let itemThree = item[3];\r\n                                let scoreDiff = \"\";\r\n                                let bonusArray = \"\";\r\n                                if (status === \"after\") {\r\n                                    // show guess\r\n                                    itemThree = item[4];\r\n                                    // set score and bonus info\r\n                                    scoreDiff = ((item[2] - item[6]) !== 0) ? <span className=\"scoreDiff\">+{item[2] - item[6]}</span> : null\r\n                                    bonusArray = item[7].map((bonus, index) => <div key={bonus[0]+item[1]} className=\"bonus\">{bonus[0]} +{bonus[1]}</div>)\r\n                                } else if (status === \"before\") {\r\n                                    // show skill rating\r\n                                    itemThree = item[5];\r\n                                }\r\n                                //PFPs.get(item[1])\r\n                                return (\r\n                                <tr key={item[1] + \"Row\"}>\r\n                                    <td key={item[1] + \"name\"}><img src={PFPs.get(item[1])}></img>{PFPs.get(item[1])}{item[1]}</td>\r\n                                    <td key={item[1] + \"score\"}>{item[2]} {scoreDiff} {bonusArray}</td>\r\n                                    <td key={item[1] + colThree }>{itemThree}</td>\r\n                                </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            );\r\n        } else {\r\n            return(<p>ERROR: SCORES NOT ARRAY</p>);\r\n        }\r\n    }\r\n};\r\nexport default PlayerSection;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}