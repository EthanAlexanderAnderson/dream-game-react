{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\nvar URL = require('url');\nmodule.exports = function createClient(port_arg, host_arg, options) {\n  if (typeof port_arg === 'number' || typeof port_arg === 'string' && /^\\d+$/.test(port_arg)) {\n    var host;\n    if (typeof host_arg === 'string') {\n      host = host_arg;\n    } else {\n      if (options && host_arg) {\n        throw new TypeError('Unknown type of connection in createClient()');\n      }\n      options = options || host_arg;\n    }\n    options = utils.clone(options);\n    options.host = host || options.host;\n    options.port = port_arg;\n  } else if (typeof port_arg === 'string' || port_arg && port_arg.url) {\n    options = utils.clone(port_arg.url ? port_arg : host_arg || options);\n    var url = port_arg.url || port_arg;\n    var parsed = URL.parse(url, true, true);\n\n    // [redis:]//[[user][:password]@][host][:port][/db-number][?db=db-number[&password=bar[&option=value]]]\n    if (parsed.slashes) {\n      // We require slashes\n      if (parsed.auth) {\n        options.password = parsed.auth.slice(parsed.auth.indexOf(':') + 1);\n      }\n      if (parsed.protocol) {\n        if (parsed.protocol === 'rediss:') {\n          options.tls = options.tls || {};\n        } else if (parsed.protocol !== 'redis:') {\n          console.warn('node_redis: WARNING: You passed \"' + parsed.protocol.substring(0, parsed.protocol.length - 1) + '\" as protocol instead of the \"redis\" protocol!');\n        }\n      }\n      if (parsed.pathname && parsed.pathname !== '/') {\n        options.db = parsed.pathname.substr(1);\n      }\n      if (parsed.hostname) {\n        options.host = parsed.hostname;\n      }\n      if (parsed.port) {\n        options.port = parsed.port;\n      }\n      if (parsed.search !== '') {\n        var elem;\n        for (elem in parsed.query) {\n          // If options are passed twice, only the parsed options will be used\n          if (elem in options) {\n            if (options[elem] === parsed.query[elem]) {\n              console.warn('node_redis: WARNING: You passed the ' + elem + ' option twice!');\n            } else {\n              throw new RangeError('The ' + elem + ' option is added twice and does not match');\n            }\n          }\n          options[elem] = parsed.query[elem];\n        }\n      }\n    } else if (parsed.hostname) {\n      throw new RangeError('The redis url must begin with slashes \"//\" or contain slashes after the redis protocol');\n    } else {\n      options.path = url;\n    }\n  } else if (typeof port_arg === 'object' || port_arg === undefined) {\n    options = utils.clone(port_arg || options);\n    options.host = options.host || host_arg;\n    if (port_arg && arguments.length !== 1) {\n      throw new TypeError('Too many arguments passed to createClient. Please only pass the options object');\n    }\n  }\n  if (!options) {\n    throw new TypeError('Unknown type of connection in createClient()');\n  }\n  return options;\n};","map":{"version":3,"names":["utils","require","URL","module","exports","createClient","port_arg","host_arg","options","test","host","TypeError","clone","port","url","parsed","parse","slashes","auth","password","slice","indexOf","protocol","tls","console","warn","substring","length","pathname","db","substr","hostname","search","elem","query","RangeError","path","undefined","arguments"],"sources":["C:/Users/Ethan/Desktop/Dream Game Site/v4/client/node_modules/redis/lib/createClient.js"],"sourcesContent":["'use strict';\n\nvar utils = require('./utils');\nvar URL = require('url');\n\nmodule.exports = function createClient (port_arg, host_arg, options) {\n\n    if (typeof port_arg === 'number' || typeof port_arg === 'string' && /^\\d+$/.test(port_arg)) {\n\n        var host;\n        if (typeof host_arg === 'string') {\n            host = host_arg;\n        } else {\n            if (options && host_arg) {\n                throw new TypeError('Unknown type of connection in createClient()');\n            }\n            options = options || host_arg;\n        }\n        options = utils.clone(options);\n        options.host = host || options.host;\n        options.port = port_arg;\n\n    } else if (typeof port_arg === 'string' || port_arg && port_arg.url) {\n\n        options = utils.clone(port_arg.url ? port_arg : host_arg || options);\n        var url = port_arg.url || port_arg;\n        var parsed = URL.parse(url, true, true);\n\n        // [redis:]//[[user][:password]@][host][:port][/db-number][?db=db-number[&password=bar[&option=value]]]\n        if (parsed.slashes) { // We require slashes\n            if (parsed.auth) {\n                options.password = parsed.auth.slice(parsed.auth.indexOf(':') + 1);\n            }\n            if (parsed.protocol) {\n                if (parsed.protocol === 'rediss:') {\n                    options.tls = options.tls || {};\n                } else if (parsed.protocol !== 'redis:') {\n                    console.warn('node_redis: WARNING: You passed \"' + parsed.protocol.substring(0, parsed.protocol.length - 1) + '\" as protocol instead of the \"redis\" protocol!');\n                }\n            }\n            if (parsed.pathname && parsed.pathname !== '/') {\n                options.db = parsed.pathname.substr(1);\n            }\n            if (parsed.hostname) {\n                options.host = parsed.hostname;\n            }\n            if (parsed.port) {\n                options.port = parsed.port;\n            }\n            if (parsed.search !== '') {\n                var elem;\n                for (elem in parsed.query) {\n                    // If options are passed twice, only the parsed options will be used\n                    if (elem in options) {\n                        if (options[elem] === parsed.query[elem]) {\n                            console.warn('node_redis: WARNING: You passed the ' + elem + ' option twice!');\n                        } else {\n                            throw new RangeError('The ' + elem + ' option is added twice and does not match');\n                        }\n                    }\n                    options[elem] = parsed.query[elem];\n                }\n            }\n        } else if (parsed.hostname) {\n            throw new RangeError('The redis url must begin with slashes \"//\" or contain slashes after the redis protocol');\n        } else {\n            options.path = url;\n        }\n\n    } else if (typeof port_arg === 'object' || port_arg === undefined) {\n        options = utils.clone(port_arg || options);\n        options.host = options.host || host_arg;\n\n        if (port_arg && arguments.length !== 1) {\n            throw new TypeError('Too many arguments passed to createClient. Please only pass the options object');\n        }\n    }\n\n    if (!options) {\n        throw new TypeError('Unknown type of connection in createClient()');\n    }\n\n    return options;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}