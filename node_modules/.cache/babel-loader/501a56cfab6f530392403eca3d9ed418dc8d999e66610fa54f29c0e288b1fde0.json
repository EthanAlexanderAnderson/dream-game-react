{"ast":null,"code":"// The MIT License\n//\n// Copyright (c) 2013 Tim Smart\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar utils = require('./utils');\nvar RedisParser = function RedisParser() {\n  this.resetState();\n  process.EventEmitter.call(this);\n  return this;\n};\nmodule.exports = RedisParser;\nRedisParser.prototype = Object.create(process.EventEmitter.prototype);\n\n// Reset state, no matter where we are at.\nRedisParser.prototype.resetState = function resetState() {\n  this.reply = null;\n  this.expected = null;\n  this.multi = null;\n  this.replies = null;\n  this.pos = null;\n  this.flag = 'TYPE';\n  this.data = null;\n  this.last_data = null;\n  this.remaining = null;\n};\n\n// Handle an incoming buffer.\nRedisParser.prototype.onIncoming = function onIncoming(buffer) {\n  var char_code,\n    pos = this.pos || 0,\n    length = buffer.length;\n\n  // Make sure the buffer is joint properly.\n  if ('TYPE' !== this.flag && 'BULK' !== this.flag && null !== this.data) {\n    // We need to wind back a step.\n    // If we have CR now, it would break the parser.\n    if (0 !== this.data.length) {\n      char_code = this.data.charCodeAt(this.data.length - 1);\n      this.data = this.data.slice(0, -1);\n      --pos;\n    } else {\n      char_code = buffer[pos];\n    }\n  }\n  for (; length > pos;) {\n    switch (this.flag) {\n      case 'TYPE':\n        // What are we doing next?\n        switch (buffer[pos++]) {\n          // Single line status reply.\n          case 43:\n            // + SINGLE\n            this.flag = 'SINGLE';\n            break;\n\n          // Tells us the length of upcoming data.\n          case 36:\n            // $ LENGTH\n            this.flag = 'BULK_LENGTH';\n            break;\n\n          // Tells us how many args are coming up.\n          case 42:\n            // * MULTI\n            this.flag = 'MULTI_BULK';\n            break;\n          case 58:\n            // : INTEGER\n            this.flag = 'INTEGER';\n            break;\n\n          // Errors\n          case 45:\n            // - ERROR\n            this.flag = 'ERROR';\n            break;\n        }\n        // Fast forward a char.\n        char_code = buffer[pos];\n        this.data = '';\n        break;\n\n      // Single line status replies.\n      case 'SINGLE':\n      case 'ERROR':\n        // Add char to the data\n        this.data += String.fromCharCode(char_code);\n        pos++;\n\n        // Optimize for the common use case.\n        if ('O' === this.data && 75 === buffer[pos]) {\n          // OK\n          // Send off the reply.\n          this.data = 'OK';\n          this.onData();\n          pos += 3; // Skip the `K\\r\\n`\n\n          // break early.\n          break;\n        }\n\n        // Otherwise check for CR\n        char_code = buffer[pos];\n        if (13 === char_code) {\n          // \\r CR\n          // Send the reply.\n          if ('SINGLE' === this.flag) {\n            this.onData();\n          } else {\n            this.onError();\n          }\n\n          // Skip \\r\\n\n          pos += 2;\n        }\n        break;\n\n      // We have a integer coming up. Look for a CR\n      // then assume that is the end.\n      case 'BULK_LENGTH':\n        // We are still looking for more digits.\n        // char_code already set by TYPE state.\n        this.data += String.fromCharCode(char_code);\n        pos++;\n\n        // Is the next char the end? Set next char_code while\n        // we are at it.\n        char_code = buffer[pos];\n        if (13 === char_code) {\n          // \\r CR\n          // Cast to int\n          this.data = +this.data;\n\n          // Null reply?\n          if (-1 !== this.data) {\n            this.flag = 'BULK';\n            this.last_data = this.data;\n            this.data = null;\n          } else {\n            this.data = null;\n            this.onData();\n          }\n\n          // Skip the \\r\\n\n          pos += 2;\n        }\n        break;\n\n      // Short bulk reply.\n      case 'BULK':\n        if (null === this.data && length >= pos + this.last_data) {\n          // Slow slice is slow.\n          if (14 > this.last_data) {\n            this.data = new Buffer(this.last_data);\n            for (var i = 0; i < this.last_data; i++) {\n              this.data[i] = buffer[i + pos];\n            }\n          } else {\n            this.data = buffer.slice(pos, this.last_data + pos);\n          }\n\n          // Fast forward past data.\n          pos += this.last_data + 2;\n\n          // Send it off.\n          this.onData();\n        } else if (this.data) {\n          // Still joining. pos = amount left to go.\n          if (this.remaining <= length) {\n            // End is within this buffer.\n            if (13 < this.remaining) {\n              buffer.copy(this.data, this.last_data - this.remaining, 0, this.remaining);\n            } else {\n              utils.copyBuffer(buffer, this.data, this.last_data - this.remaining, 0, this.remaining);\n            }\n\n            // Fast forward past data.\n            pos = this.remaining + 2;\n            this.remaining = null;\n            this.onData();\n          } else {\n            // We have more to come. Copy what we got then move on,\n            // decrementing the amount we have copied from this.remaining\n            if (13 < this.remaining - length) {\n              utils.copyBuffer(buffer, this.data, this.last_data - this.remaining, 0, length);\n            } else {\n              buffer.copy(this.data, this.last_data - this.remaining, 0, length);\n            }\n\n            // More to go.\n            this.remaining -= length;\n            pos = length;\n          }\n        } else {\n          // We will have to do a join.\n          this.data = new Buffer(this.last_data);\n\n          // Fast copy if small.\n          if (15 > this.last_data) {\n            utils.copyBuffer(buffer, this.data, 0, pos);\n          } else {\n            buffer.copy(this.data, 0, pos);\n          }\n\n          // Point pos to the amount we need.\n          this.remaining = this.last_data - (length - pos);\n          pos = length;\n        }\n        break;\n\n      // How many bulk's are coming?\n      case 'MULTI_BULK':\n        // We are still looking for more digits.\n        // char_code already set by TYPE state.\n        this.data += String.fromCharCode(char_code);\n        pos++;\n\n        // Is the next char the end? Set next char_code while\n        // we are at it.\n        char_code = buffer[pos];\n        if (13 === char_code) {\n          // \\r CR\n          // Cast to int\n          this.last_data = +this.data;\n          this.data = null;\n\n          // Are we multi?\n          if (null === this.expected) {\n            this.expected = this.last_data;\n            this.reply = [];\n          } else if (null === this.multi) {\n            this.multi = this.expected;\n            this.expected = null;\n            this.replies = [];\n          }\n\n          // Skip the \\r\\n\n          pos += 2;\n          this.flag = 'TYPE';\n\n          // Zero length replies.\n          if (0 === this.last_data) {\n            this.expected = this.reply = null;\n            this.data = [];\n            this.onData();\n            break;\n          } else if (-1 === this.last_data) {\n            // NIL reply.\n            this.expected = this.reply = null;\n            this.data = null;\n            this.onData();\n            break;\n          }\n          char_code = buffer[pos];\n\n          // Will have to look ahead to check for another MULTI in case\n          // we are a multi transaction.\n          if (36 === char_code) {\n            // $ - BULK_LENGTH\n            // We are bulk data.\n            this.flag = 'BULK_LENGTH';\n\n            // We are skipping the TYPE check. Skip the $\n            pos++;\n            // We need to set char code and data.\n            char_code = buffer[pos];\n            this.data = '';\n          } else if (null === this.multi && char_code) {\n            // Multi trans time.\n            this.multi = this.expected;\n            this.expected = null;\n            this.replies = [];\n          }\n        }\n        break;\n      case 'INTEGER':\n        // We are still looking for more digits.\n        // char_code already set by TYPE state.\n        this.data += String.fromCharCode(char_code);\n        pos++;\n\n        // Is the next char the end? Set next char_code while\n        // we are at it.\n        char_code = buffer[pos];\n        if (13 === char_code) {\n          // \\r CR\n          // Cast to int\n          this.data = +this.data;\n          this.onData();\n\n          // Skip the \\r\\n\n          pos += 2;\n        }\n        break;\n    }\n  }\n\n  // In case we have multiple packets.\n  this.pos = pos - length;\n};\n\n// When we have recieved a chunk of response data.\nRedisParser.prototype.onData = function onData() {\n  if (null !== this.expected) {\n    // Decrement the expected data replies and add the data.\n    this.reply.push(this.data);\n    this.expected--;\n\n    // Finished? Send it off.\n    if (0 === this.expected) {\n      if (null !== this.multi) {\n        this.replies.push(this.reply);\n        this.multi--;\n        if (0 === this.multi) {\n          this.emit('reply', this.replies);\n          this.replies = this.multi = null;\n        }\n      } else {\n        this.emit('reply', this.reply);\n      }\n      this.reply = this.expected = null;\n    }\n  } else {\n    if (null === this.multi) {\n      this.emit('reply', this.data);\n    } else {\n      this.replies.push(this.data);\n      this.multi--;\n      if (0 === this.multi) {\n        this.emit('reply', this.replies);\n        this.replies = this.multi = null;\n      }\n    }\n  }\n  this.last_data = null;\n  this.data = null;\n  this.flag = 'TYPE';\n};\n\n// Found an error.\nRedisParser.prototype.onError = function onError() {\n  if (null === this.multi) {\n    this.emit('error', this.data);\n  } else {\n    this.replies.push(this.data);\n    this.multi--;\n    if (0 === this.multi) {\n      this.emit('reply', this.replies);\n      this.replies = this.multi = null;\n    }\n  }\n  this.last_data = null;\n  this.data = null;\n  this.flag = 'TYPE';\n};","map":{"version":3,"names":["utils","require","RedisParser","resetState","process","EventEmitter","call","module","exports","prototype","Object","create","reply","expected","multi","replies","pos","flag","data","last_data","remaining","onIncoming","buffer","char_code","length","charCodeAt","slice","String","fromCharCode","onData","onError","Buffer","i","copy","copyBuffer","push","emit"],"sources":["C:/Users/Ethan/Desktop/Dream Game Site/v4/client/node_modules/node-redis/parser.js"],"sourcesContent":["// The MIT License\n//\n// Copyright (c) 2013 Tim Smart\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar utils = require('./utils');\n\nvar RedisParser = function RedisParser () {\n  this.resetState();\n\n  process.EventEmitter.call(this);\n\n  return this;\n};\n\nmodule.exports = RedisParser;\n\nRedisParser.prototype = Object.create(process.EventEmitter.prototype);\n\n// Reset state, no matter where we are at.\nRedisParser.prototype.resetState = function resetState () {\n  this.reply     = null;\n  this.expected  = null;\n  this.multi     = null;\n  this.replies   = null;\n  this.pos       = null;\n  this.flag      = 'TYPE';\n  this.data      = null;\n  this.last_data = null;\n  this.remaining = null;\n};\n\n// Handle an incoming buffer.\nRedisParser.prototype.onIncoming = function onIncoming (buffer) {\n  var char_code,\n      pos    = this.pos || 0,\n      length = buffer.length;\n\n  // Make sure the buffer is joint properly.\n  if ('TYPE' !== this.flag && 'BULK' !== this.flag && null !== this.data) {\n    // We need to wind back a step.\n    // If we have CR now, it would break the parser.\n    if (0 !== this.data.length) {\n      char_code = this.data.charCodeAt(this.data.length - 1);\n      this.data = this.data.slice(0, -1);\n      --pos;\n    } else {\n      char_code = buffer[pos];\n    }\n  }\n\n  for (; length > pos;) {\n    switch (this.flag) {\n    case 'TYPE':\n      // What are we doing next?\n      switch (buffer[pos++]) {\n      // Single line status reply.\n      case 43: // + SINGLE\n        this.flag = 'SINGLE';\n        break;\n\n      // Tells us the length of upcoming data.\n      case 36: // $ LENGTH\n        this.flag = 'BULK_LENGTH';\n        break;\n\n      // Tells us how many args are coming up.\n      case 42: // * MULTI\n        this.flag = 'MULTI_BULK';\n        break;\n\n      case 58: // : INTEGER\n        this.flag = 'INTEGER';\n        break;\n\n      // Errors\n      case 45: // - ERROR\n        this.flag = 'ERROR';\n        break;\n      }\n      // Fast forward a char.\n      char_code = buffer[pos];\n      this.data = '';\n      break;\n\n    // Single line status replies.\n    case 'SINGLE':\n    case 'ERROR':\n      // Add char to the data\n      this.data += String.fromCharCode(char_code);\n      pos++;\n\n      // Optimize for the common use case.\n      if ('O' === this.data && 75 === buffer[pos]) { // OK\n        // Send off the reply.\n        this.data = 'OK';\n        this.onData();\n\n        pos += 3; // Skip the `K\\r\\n`\n\n        // break early.\n        break;\n      }\n\n      // Otherwise check for CR\n      char_code = buffer[pos];\n      if (13 === char_code) { // \\r CR\n        // Send the reply.\n        if ('SINGLE' === this.flag) {\n          this.onData();\n        } else {\n          this.onError();\n        }\n\n        // Skip \\r\\n\n        pos += 2;\n      }\n      break;\n\n    // We have a integer coming up. Look for a CR\n    // then assume that is the end.\n    case 'BULK_LENGTH':\n      // We are still looking for more digits.\n      // char_code already set by TYPE state.\n      this.data += String.fromCharCode(char_code);\n      pos++;\n\n      // Is the next char the end? Set next char_code while\n      // we are at it.\n      char_code = buffer[pos];\n      if (13 === char_code) { // \\r CR\n        // Cast to int\n        this.data = +this.data;\n\n        // Null reply?\n        if (-1 !== this.data) {\n          this.flag      = 'BULK';\n          this.last_data = this.data;\n          this.data      = null;\n        } else {\n          this.data = null;\n          this.onData();\n        }\n\n        // Skip the \\r\\n\n        pos += 2;\n      }\n      break;\n\n    // Short bulk reply.\n    case 'BULK':\n      if (null === this.data && length >= (pos + this.last_data)) {\n        // Slow slice is slow.\n        if (14 > this.last_data) {\n          this.data = new Buffer(this.last_data);\n          for (var i = 0; i < this.last_data; i++) {\n            this.data[i] = buffer[i + pos];\n          }\n        } else {\n          this.data = buffer.slice(pos, this.last_data + pos);\n        }\n\n        // Fast forward past data.\n        pos += this.last_data + 2;\n\n        // Send it off.\n        this.onData();\n      } else if (this.data) {\n        // Still joining. pos = amount left to go.\n        if (this.remaining <= length) {\n          // End is within this buffer.\n          if (13 < this.remaining) {\n            buffer.copy(this.data, this.last_data - this.remaining, 0, this.remaining)\n          } else {\n            utils.copyBuffer(buffer, this.data, this.last_data - this.remaining, 0, this.remaining);\n          }\n\n          // Fast forward past data.\n          pos = this.remaining + 2;\n          this.remaining = null;\n\n          this.onData();\n        } else {\n          // We have more to come. Copy what we got then move on,\n          // decrementing the amount we have copied from this.remaining\n          if (13 < (this.remaining - length)) {\n            utils.copyBuffer(buffer, this.data, this.last_data - this.remaining, 0, length);\n          } else {\n            buffer.copy(this.data, this.last_data - this.remaining, 0, length);\n          }\n\n          // More to go.\n          this.remaining -= length;\n          pos             = length;\n        }\n      } else {\n        // We will have to do a join.\n        this.data = new Buffer(this.last_data);\n\n        // Fast copy if small.\n        if (15 > this.last_data) {\n          utils.copyBuffer(buffer, this.data, 0, pos);\n        } else {\n          buffer.copy(this.data, 0, pos)\n        }\n\n        // Point pos to the amount we need.\n        this.remaining = this.last_data - (length - pos);\n        pos            = length;\n      }\n      break;\n\n    // How many bulk's are coming?\n    case 'MULTI_BULK':\n      // We are still looking for more digits.\n      // char_code already set by TYPE state.\n      this.data += String.fromCharCode(char_code);\n      pos++;\n\n      // Is the next char the end? Set next char_code while\n      // we are at it.\n      char_code = buffer[pos];\n      if (13 === char_code) { // \\r CR\n        // Cast to int\n        this.last_data = +this.data;\n        this.data      = null;\n\n        // Are we multi?\n        if (null === this.expected) {\n          this.expected = this.last_data;\n          this.reply    = [];\n        } else if (null === this.multi) {\n          this.multi    = this.expected;\n          this.expected = null;\n          this.replies  = [];\n        }\n\n        // Skip the \\r\\n\n        pos += 2;\n        this.flag = 'TYPE';\n\n        // Zero length replies.\n        if (0 === this.last_data) {\n          this.expected = this.reply = null;\n          this.data     = [];\n          this.onData();\n          break;\n        } else if (-1 === this.last_data) {\n          // NIL reply.\n          this.expected = this.reply = null;\n          this.data     = null;\n          this.onData();\n          break;\n        }\n\n        char_code = buffer[pos];\n\n        // Will have to look ahead to check for another MULTI in case\n        // we are a multi transaction.\n        if (36 === char_code) { // $ - BULK_LENGTH\n          // We are bulk data.\n          this.flag = 'BULK_LENGTH';\n\n          // We are skipping the TYPE check. Skip the $\n          pos++;\n          // We need to set char code and data.\n          char_code = buffer[pos];\n          this.data = '';\n        } else if (null === this.multi && char_code) {\n          // Multi trans time.\n          this.multi    = this.expected;\n          this.expected = null;\n          this.replies  = [];\n        }\n      }\n      break;\n\n    case 'INTEGER':\n      // We are still looking for more digits.\n      // char_code already set by TYPE state.\n      this.data += String.fromCharCode(char_code);\n      pos++;\n\n      // Is the next char the end? Set next char_code while\n      // we are at it.\n      char_code = buffer[pos];\n      if (13 === char_code) { // \\r CR\n        // Cast to int\n        this.data = +this.data;\n        this.onData();\n\n        // Skip the \\r\\n\n        pos += 2;\n      }\n      break;\n    }\n  }\n\n  // In case we have multiple packets.\n  this.pos = pos - length;\n};\n\n// When we have recieved a chunk of response data.\nRedisParser.prototype.onData = function onData () {\n  if (null !== this.expected) {\n    // Decrement the expected data replies and add the data.\n    this.reply.push(this.data);\n    this.expected--;\n\n    // Finished? Send it off.\n    if (0 === this.expected) {\n      if (null !== this.multi) {\n        this.replies.push(this.reply);\n        this.multi--;\n\n        if (0 === this.multi) {\n          this.emit('reply', this.replies);\n          this.replies = this.multi = null;\n        }\n      } else {\n        this.emit('reply', this.reply);\n      }\n      this.reply = this.expected = null;\n    }\n  } else {\n    if (null === this.multi) {\n      this.emit('reply', this.data);\n    } else {\n      this.replies.push(this.data);\n      this.multi--;\n\n      if (0 === this.multi) {\n        this.emit('reply', this.replies);\n        this.replies = this.multi = null;\n      }\n    }\n  }\n\n  this.last_data = null;\n  this.data      = null;\n  this.flag      = 'TYPE';\n};\n\n// Found an error.\nRedisParser.prototype.onError = function onError () {\n  if (null === this.multi) {\n    this.emit('error', this.data);\n  } else {\n    this.replies.push(this.data);\n    this.multi--;\n\n    if (0 === this.multi) {\n      this.emit('reply', this.replies);\n      this.replies = this.multi = null;\n    }\n  }\n\n  this.last_data = null;\n  this.data      = null;\n  this.flag      = 'TYPE';\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}