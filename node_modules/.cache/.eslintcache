[{"C:\\Users\\Ethan\\Desktop\\Dream Game Site\\v4\\src\\index.js":"1","C:\\Users\\Ethan\\Desktop\\Dream Game Site\\v4\\src\\App.js":"2","C:\\Users\\Ethan\\Desktop\\Dream Game Site\\v4\\src\\nameButtons.js":"3"},{"size":232,"mtime":1683769466561,"results":"4","hashOfConfig":"5"},{"size":3478,"mtime":1683769398174,"results":"6","hashOfConfig":"5"},{"size":1167,"mtime":1683683436146,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qtncj5",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Ethan\\Desktop\\Dream Game Site\\v4\\src\\index.js",[],[],"C:\\Users\\Ethan\\Desktop\\Dream Game Site\\v4\\src\\App.js",["18","19","20","21","22","23"],[],"import io from 'socket.io-client'\n//import Buffer from 'buffer';\n//import Crypto from 'crypto';\n//import Redis from 'redis';\nimport { useEffect, useState} from \"react\";\nimport NameButtons from './nameButtons';\nconst socket = io.connect(\"http://localhost:3001\")\n\nfunction App() {\n  // states\n  const [message, setMessage] = useState(\"\");\n  const [messageReceived, setMessageReceived] = useState(\"\");\n  const [textSection, setTextSection] = useState(\"Welcome to Dream Game.\\nPlease select your name:\");\n  const [name, setName] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [players, setPlayers] = useState([]);\n  //const [myGuess, setMyGuess] = useState(\"\");\n  let myGuess = \"\";\n  const [guessed, setGuessed] = useState([]);\n  //const [dreamer, setDreamer] = useState(\"\");\n\n  let dreamer = \"\";\n\n  // player come online\n  const playerJoin = (data) => {\n    // set name on user\n    setName(data);\n    // update player list on user\n    setPlayers(previous => [...previous, data])\n    // update player list on peers\n    socket.emit(\"player_join_u\", { data });\n  };\n\n  // start round\n  const start = () => {\n    socket.emit(\"get_random_dream_u\");\n  };\n\n  // player guesses\n  const guess = (data) => {\n    //console.log(data);\n    //setMyGuess(data);\n    myGuess = data;\n    console.log(myGuess);\n    socket.emit(\"guess_u\", name);\n  }\n\n  // send message to socket\n  const sendMessage = () => {\n    socket.emit(\"send_message\", { message, name });\n  }\n\n  const end = () => {\n    console.log(\"asdasdasdada \"+myGuess);\n  };\n\n  // receive from socket\n  useEffect(( myGuess ) => {\n\n    socket.on(\"receive_message\", (data) => {\n      var message = data.message;\n      var name = data.name;\n      setMessageReceived(name + \": \" + message);\n    });\n\n    socket.on(\"player_join_d\", (data) => {\n      setPlayers(previous => [...previous, data.data])\n    });\n\n    socket.on(\"get_random_dream_d\", (data) => {\n      setTextSection(data.dream);\n      setStatus(\"during\");\n      //setDreamer(data.dreamer);\n      dreamer = data.dreamer;\n      console.log(\"dreamer: \" + data.dreamer);\n    });\n\n    socket.on(\"guess_d\", (data) => {\n      setGuessed(previous => [...previous, data]);\n      console.log(\"guessed: \" + data);\n      \n    });\n\n    socket.on(\"all_guessed\", (data) => {\n      if (data.redisResult === data.guess) {\n        setTextSection(\"CORRECT\\nANSWER: \" + data.redisResult + \"\\nYou guessed: \" + data.guess);\n      } else {\n        setTextSection(\"INCORRECT\\nANSWER: \" + data.redisResult + \"\\nYou guessed: \" + data.guess);\n      }\n      setStatus(\"after\");\n    });\n\n    return () => {\n      socket.off(\"player_join_d\");\n      socket.off(\"get_random_dream_d\");\n      socket.off(\"guess_d\");\n      socket.off(\"all_guessed\");\n    };\n\n  }, [socket]);\n\n  // display\n  return (\n    <div className=\"App\" style={{whiteSpace: `pre-line`}}>\n\n      <h1>Name: {name}</h1>\n      <br></br>\n\n      <p>{textSection}</p>\n      <NameButtons name={name} playerJoin={playerJoin} status={status} start={start} guess={guess}/>\n      <br></br>\n\n      <h1>Players:</h1>\n      <div>\n        {players.map(item => {\n          return <div>{item}</div>;\n        })}\n      </div>\n      <h1>{dreamer}</h1>\n\n    </div>\n  );\n}\n\nexport default App;\n\n/*\n\n      <input \n        placeholder=\"Message...\" \n        onChange={(event) => {\n          setMessage(event.target.value);\n        }}\n      />\n      <button onClick={sendMessage}> Send Message</button>\n\n      <h1>Message:</h1>\n      {messageReceived}\n*/","C:\\Users\\Ethan\\Desktop\\Dream Game Site\\v4\\src\\nameButtons.js",[],[],{"ruleId":"24","severity":1,"message":"25","line":11,"column":19,"nodeType":"26","messageId":"27","endLine":11,"endColumn":29},{"ruleId":"24","severity":1,"message":"28","line":12,"column":10,"nodeType":"26","messageId":"27","endLine":12,"endColumn":25},{"ruleId":"24","severity":1,"message":"29","line":19,"column":10,"nodeType":"26","messageId":"27","endLine":19,"endColumn":17},{"ruleId":"24","severity":1,"message":"30","line":49,"column":9,"nodeType":"26","messageId":"27","endLine":49,"endColumn":20},{"ruleId":"24","severity":1,"message":"31","line":53,"column":9,"nodeType":"26","messageId":"27","endLine":53,"endColumn":12},{"ruleId":"32","severity":1,"message":"33","line":74,"column":17,"nodeType":"34","endLine":74,"endColumn":29},"no-unused-vars","'setMessage' is assigned a value but never used.","Identifier","unusedVar","'messageReceived' is assigned a value but never used.","'guessed' is assigned a value but never used.","'sendMessage' is assigned a value but never used.","'end' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'dreamer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression"]