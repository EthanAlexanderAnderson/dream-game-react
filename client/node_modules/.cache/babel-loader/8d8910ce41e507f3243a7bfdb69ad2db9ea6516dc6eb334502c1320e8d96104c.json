{"ast":null,"code":"'use strict';\n\nvar commands = require('./commands.json');\n\n/**\n * Redis command list\n *\n * All commands are lowercased.\n *\n * @var {string[]}\n * @public\n */\nexports.list = Object.keys(commands);\nvar flags = {};\nexports.list.forEach(function (commandName) {\n  flags[commandName] = commands[commandName].flags.reduce(function (flags, flag) {\n    flags[flag] = true;\n    return flags;\n  }, {});\n});\n/**\n * Check if the command exists\n *\n * @param {string} commandName - the command name\n * @return {boolean} result\n * @public\n */\nexports.exists = function (commandName) {\n  return Boolean(commands[commandName]);\n};\n\n/**\n * Check if the command has the flag\n *\n * Some of possible flags: readonly, noscript, loading\n * @param {string} commandName - the command name\n * @param {string} flag - the flag to check\n * @return {boolean} result\n * @public\n */\nexports.hasFlag = function (commandName, flag) {\n  if (!flags[commandName]) {\n    throw new Error('Unknown command ' + commandName);\n  }\n  return Boolean(flags[commandName][flag]);\n};\n\n/**\n * Get indexes of keys in the command arguments\n *\n * @param {string} commandName - the command name\n * @param {string[]} args - the arguments of the command\n * @param {object} [options] - options\n * @param {boolean} [options.parseExternalKey] - parse external keys\n * @return {number[]} - the list of the index\n * @public\n *\n * @example\n * ```javascript\n * getKeyIndexes('set', ['key', 'value']) // [0]\n * getKeyIndexes('mget', ['key1', 'key2']) // [0, 1]\n * ```\n */\nexports.getKeyIndexes = function (commandName, args, options) {\n  var command = commands[commandName];\n  if (!command) {\n    throw new Error('Unknown command ' + commandName);\n  }\n  if (!Array.isArray(args)) {\n    throw new Error('Expect args to be an array');\n  }\n  var keys = [];\n  var i, keyStart, keyStop, parseExternalKey;\n  switch (commandName) {\n    case 'zunionstore':\n    case 'zinterstore':\n      keys.push(0);\n    // fall through\n    case 'eval':\n    case 'evalsha':\n      keyStop = Number(args[1]) + 2;\n      for (i = 2; i < keyStop; i++) {\n        keys.push(i);\n      }\n      break;\n    case 'sort':\n      parseExternalKey = options && options.parseExternalKey;\n      keys.push(0);\n      for (i = 1; i < args.length - 1; i++) {\n        if (typeof args[i] !== 'string') {\n          continue;\n        }\n        var directive = args[i].toUpperCase();\n        if (directive === 'GET') {\n          i += 1;\n          if (args[i] !== '#') {\n            if (parseExternalKey) {\n              keys.push([i, getExternalKeyNameLength(args[i])]);\n            } else {\n              keys.push(i);\n            }\n          }\n        } else if (directive === 'BY') {\n          i += 1;\n          if (parseExternalKey) {\n            keys.push([i, getExternalKeyNameLength(args[i])]);\n          } else {\n            keys.push(i);\n          }\n        } else if (directive === 'STORE') {\n          i += 1;\n          keys.push(i);\n        }\n      }\n      break;\n    case 'migrate':\n      if (args[2] === '') {\n        for (i = 5; i < args.length - 1; i++) {\n          if (args[i].toUpperCase() === 'KEYS') {\n            for (var j = i + 1; j < args.length; j++) {\n              keys.push(j);\n            }\n            break;\n          }\n        }\n      } else {\n        keys.push(2);\n      }\n      break;\n    case 'xreadgroup':\n    case 'xread':\n      // Keys are 1st half of the args after STREAMS argument.\n      for (i = commandName === 'xread' ? 0 : 3; i < args.length - 1; i++) {\n        if (String(args[i]).toUpperCase() === 'STREAMS') {\n          for (j = i + 1; j <= i + (args.length - 1 - i) / 2; j++) {\n            keys.push(j);\n          }\n          break;\n        }\n      }\n      break;\n    default:\n      // Step has to be at least one in this case, otherwise the command does\n      // not contain a key.\n      if (command.step > 0) {\n        keyStart = command.keyStart - 1;\n        keyStop = command.keyStop > 0 ? command.keyStop : args.length + command.keyStop + 1;\n        for (i = keyStart; i < keyStop; i += command.step) {\n          keys.push(i);\n        }\n      }\n      break;\n  }\n  return keys;\n};\nfunction getExternalKeyNameLength(key) {\n  if (typeof key !== 'string') {\n    key = String(key);\n  }\n  var hashPos = key.indexOf('->');\n  return hashPos === -1 ? key.length : hashPos;\n}","map":{"version":3,"names":["commands","require","exports","list","Object","keys","flags","forEach","commandName","reduce","flag","exists","Boolean","hasFlag","Error","getKeyIndexes","args","options","command","Array","isArray","i","keyStart","keyStop","parseExternalKey","push","Number","length","directive","toUpperCase","getExternalKeyNameLength","j","String","step","key","hashPos","indexOf"],"sources":["C:/Users/Ethan/Desktop/Dream Game Site/v4/client/node_modules/redis-commands/index.js"],"sourcesContent":["'use strict'\n\nvar commands = require('./commands.json')\n\n/**\n * Redis command list\n *\n * All commands are lowercased.\n *\n * @var {string[]}\n * @public\n */\nexports.list = Object.keys(commands)\n\nvar flags = {}\nexports.list.forEach(function (commandName) {\n  flags[commandName] = commands[commandName].flags.reduce(function (flags, flag) {\n    flags[flag] = true\n    return flags\n  }, {})\n})\n/**\n * Check if the command exists\n *\n * @param {string} commandName - the command name\n * @return {boolean} result\n * @public\n */\nexports.exists = function (commandName) {\n  return Boolean(commands[commandName])\n}\n\n/**\n * Check if the command has the flag\n *\n * Some of possible flags: readonly, noscript, loading\n * @param {string} commandName - the command name\n * @param {string} flag - the flag to check\n * @return {boolean} result\n * @public\n */\nexports.hasFlag = function (commandName, flag) {\n  if (!flags[commandName]) {\n    throw new Error('Unknown command ' + commandName)\n  }\n\n  return Boolean(flags[commandName][flag])\n}\n\n/**\n * Get indexes of keys in the command arguments\n *\n * @param {string} commandName - the command name\n * @param {string[]} args - the arguments of the command\n * @param {object} [options] - options\n * @param {boolean} [options.parseExternalKey] - parse external keys\n * @return {number[]} - the list of the index\n * @public\n *\n * @example\n * ```javascript\n * getKeyIndexes('set', ['key', 'value']) // [0]\n * getKeyIndexes('mget', ['key1', 'key2']) // [0, 1]\n * ```\n */\nexports.getKeyIndexes = function (commandName, args, options) {\n  var command = commands[commandName]\n  if (!command) {\n    throw new Error('Unknown command ' + commandName)\n  }\n\n  if (!Array.isArray(args)) {\n    throw new Error('Expect args to be an array')\n  }\n\n  var keys = []\n  var i, keyStart, keyStop, parseExternalKey\n  switch (commandName) {\n    case 'zunionstore':\n    case 'zinterstore':\n      keys.push(0)\n    // fall through\n    case 'eval':\n    case 'evalsha':\n      keyStop = Number(args[1]) + 2\n      for (i = 2; i < keyStop; i++) {\n        keys.push(i)\n      }\n      break\n    case 'sort':\n      parseExternalKey = options && options.parseExternalKey\n      keys.push(0)\n      for (i = 1; i < args.length - 1; i++) {\n        if (typeof args[i] !== 'string') {\n          continue\n        }\n        var directive = args[i].toUpperCase()\n        if (directive === 'GET') {\n          i += 1\n          if (args[i] !== '#') {\n            if (parseExternalKey) {\n              keys.push([i, getExternalKeyNameLength(args[i])])\n            } else {\n              keys.push(i)\n            }\n          }\n        } else if (directive === 'BY') {\n          i += 1\n          if (parseExternalKey) {\n            keys.push([i, getExternalKeyNameLength(args[i])])\n          } else {\n            keys.push(i)\n          }\n        } else if (directive === 'STORE') {\n          i += 1\n          keys.push(i)\n        }\n      }\n      break\n    case 'migrate':\n      if (args[2] === '') {\n        for (i = 5; i < args.length - 1; i++) {\n          if (args[i].toUpperCase() === 'KEYS') {\n            for (var j = i + 1; j < args.length; j++) {\n              keys.push(j)\n            }\n            break\n          }\n        }\n      } else {\n        keys.push(2)\n      }\n      break\n    case 'xreadgroup':\n    case 'xread':\n      // Keys are 1st half of the args after STREAMS argument.\n      for (i = commandName === 'xread' ? 0 : 3; i < args.length - 1; i++) {\n        if (String(args[i]).toUpperCase() === 'STREAMS') {\n          for (j = i + 1; j <= i + ((args.length - 1 - i) / 2); j++) {\n            keys.push(j)\n          }\n          break\n        }\n      }\n      break\n    default:\n      // Step has to be at least one in this case, otherwise the command does\n      // not contain a key.\n      if (command.step > 0) {\n        keyStart = command.keyStart - 1\n        keyStop = command.keyStop > 0 ? command.keyStop : args.length + command.keyStop + 1\n        for (i = keyStart; i < keyStop; i += command.step) {\n          keys.push(i)\n        }\n      }\n      break\n  }\n\n  return keys\n}\n\nfunction getExternalKeyNameLength (key) {\n  if (typeof key !== 'string') {\n    key = String(key)\n  }\n  var hashPos = key.indexOf('->')\n  return hashPos === -1 ? key.length : hashPos\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}