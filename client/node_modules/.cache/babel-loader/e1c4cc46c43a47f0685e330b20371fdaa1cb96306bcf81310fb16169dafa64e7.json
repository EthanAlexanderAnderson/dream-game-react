{"ast":null,"code":"'use strict';\n\nvar commands = require('redis-commands');\nvar Multi = require('./multi');\nvar RedisClient = require('../').RedisClient;\nvar Command = require('./command');\nvar addCommand = function (command) {\n  // Some rare Redis commands use special characters in their command name\n  // Convert those to a underscore to prevent using invalid function names\n  var commandName = command.replace(/(?:^([0-9])|[^a-zA-Z0-9_$])/g, '_$1');\n\n  // Do not override existing functions\n  if (!RedisClient.prototype[command]) {\n    RedisClient.prototype[command.toUpperCase()] = RedisClient.prototype[command] = function () {\n      var arr;\n      var len = arguments.length;\n      var callback;\n      var i = 0;\n      if (Array.isArray(arguments[0])) {\n        arr = arguments[0];\n        if (len === 2) {\n          callback = arguments[1];\n        }\n      } else if (len > 1 && Array.isArray(arguments[1])) {\n        if (len === 3) {\n          callback = arguments[2];\n        }\n        len = arguments[1].length;\n        arr = new Array(len + 1);\n        arr[0] = arguments[0];\n        for (; i < len; i += 1) {\n          arr[i + 1] = arguments[1][i];\n        }\n      } else {\n        // The later should not be the average use case\n        if (len !== 0 && (typeof arguments[len - 1] === 'function' || typeof arguments[len - 1] === 'undefined')) {\n          len--;\n          callback = arguments[len];\n        }\n        arr = new Array(len);\n        for (; i < len; i += 1) {\n          arr[i] = arguments[i];\n        }\n      }\n      return this.internal_send_command(new Command(command, arr, callback));\n    };\n    // Alias special function names (e.g. NR.RUN becomes NR_RUN and nr_run)\n    if (commandName !== command) {\n      RedisClient.prototype[commandName.toUpperCase()] = RedisClient.prototype[commandName] = RedisClient.prototype[command];\n    }\n    Object.defineProperty(RedisClient.prototype[command], 'name', {\n      value: commandName\n    });\n  }\n\n  // Do not override existing functions\n  if (!Multi.prototype[command]) {\n    Multi.prototype[command.toUpperCase()] = Multi.prototype[command] = function () {\n      var arr;\n      var len = arguments.length;\n      var callback;\n      var i = 0;\n      if (Array.isArray(arguments[0])) {\n        arr = arguments[0];\n        if (len === 2) {\n          callback = arguments[1];\n        }\n      } else if (len > 1 && Array.isArray(arguments[1])) {\n        if (len === 3) {\n          callback = arguments[2];\n        }\n        len = arguments[1].length;\n        arr = new Array(len + 1);\n        arr[0] = arguments[0];\n        for (; i < len; i += 1) {\n          arr[i + 1] = arguments[1][i];\n        }\n      } else {\n        // The later should not be the average use case\n        if (len !== 0 && (typeof arguments[len - 1] === 'function' || typeof arguments[len - 1] === 'undefined')) {\n          len--;\n          callback = arguments[len];\n        }\n        arr = new Array(len);\n        for (; i < len; i += 1) {\n          arr[i] = arguments[i];\n        }\n      }\n      this.queue.push(new Command(command, arr, callback));\n      return this;\n    };\n    // Alias special function names (e.g. NR.RUN becomes NR_RUN and nr_run)\n    if (commandName !== command) {\n      Multi.prototype[commandName.toUpperCase()] = Multi.prototype[commandName] = Multi.prototype[command];\n    }\n    Object.defineProperty(Multi.prototype[command], 'name', {\n      value: commandName\n    });\n  }\n};\ncommands.list.forEach(addCommand);\nmodule.exports = addCommand;","map":{"version":3,"names":["commands","require","Multi","RedisClient","Command","addCommand","command","commandName","replace","prototype","toUpperCase","arr","len","arguments","length","callback","i","Array","isArray","internal_send_command","Object","defineProperty","value","queue","push","list","forEach","module","exports"],"sources":["C:/Users/Ethan/Desktop/Dream Game Site/v4/client/node_modules/redis/lib/commands.js"],"sourcesContent":["'use strict';\n\nvar commands = require('redis-commands');\nvar Multi = require('./multi');\nvar RedisClient = require('../').RedisClient;\nvar Command = require('./command');\n\nvar addCommand = function (command) {\n    // Some rare Redis commands use special characters in their command name\n    // Convert those to a underscore to prevent using invalid function names\n    var commandName = command.replace(/(?:^([0-9])|[^a-zA-Z0-9_$])/g, '_$1');\n\n    // Do not override existing functions\n    if (!RedisClient.prototype[command]) {\n        RedisClient.prototype[command.toUpperCase()] = RedisClient.prototype[command] = function () {\n            var arr;\n            var len = arguments.length;\n            var callback;\n            var i = 0;\n            if (Array.isArray(arguments[0])) {\n                arr = arguments[0];\n                if (len === 2) {\n                    callback = arguments[1];\n                }\n            } else if (len > 1 && Array.isArray(arguments[1])) {\n                if (len === 3) {\n                    callback = arguments[2];\n                }\n                len = arguments[1].length;\n                arr = new Array(len + 1);\n                arr[0] = arguments[0];\n                for (; i < len; i += 1) {\n                    arr[i + 1] = arguments[1][i];\n                }\n            } else {\n                // The later should not be the average use case\n                if (len !== 0 && (typeof arguments[len - 1] === 'function' || typeof arguments[len - 1] === 'undefined')) {\n                    len--;\n                    callback = arguments[len];\n                }\n                arr = new Array(len);\n                for (; i < len; i += 1) {\n                    arr[i] = arguments[i];\n                }\n            }\n            return this.internal_send_command(new Command(command, arr, callback));\n        };\n        // Alias special function names (e.g. NR.RUN becomes NR_RUN and nr_run)\n        if (commandName !== command) {\n            RedisClient.prototype[commandName.toUpperCase()] = RedisClient.prototype[commandName] = RedisClient.prototype[command];\n        }\n        Object.defineProperty(RedisClient.prototype[command], 'name', {\n            value: commandName\n        });\n    }\n\n    // Do not override existing functions\n    if (!Multi.prototype[command]) {\n        Multi.prototype[command.toUpperCase()] = Multi.prototype[command] = function () {\n            var arr;\n            var len = arguments.length;\n            var callback;\n            var i = 0;\n            if (Array.isArray(arguments[0])) {\n                arr = arguments[0];\n                if (len === 2) {\n                    callback = arguments[1];\n                }\n            } else if (len > 1 && Array.isArray(arguments[1])) {\n                if (len === 3) {\n                    callback = arguments[2];\n                }\n                len = arguments[1].length;\n                arr = new Array(len + 1);\n                arr[0] = arguments[0];\n                for (; i < len; i += 1) {\n                    arr[i + 1] = arguments[1][i];\n                }\n            } else {\n                // The later should not be the average use case\n                if (len !== 0 && (typeof arguments[len - 1] === 'function' || typeof arguments[len - 1] === 'undefined')) {\n                    len--;\n                    callback = arguments[len];\n                }\n                arr = new Array(len);\n                for (; i < len; i += 1) {\n                    arr[i] = arguments[i];\n                }\n            }\n            this.queue.push(new Command(command, arr, callback));\n            return this;\n        };\n        // Alias special function names (e.g. NR.RUN becomes NR_RUN and nr_run)\n        if (commandName !== command) {\n            Multi.prototype[commandName.toUpperCase()] = Multi.prototype[commandName] = Multi.prototype[command];\n        }\n        Object.defineProperty(Multi.prototype[command], 'name', {\n            value: commandName\n        });\n    }\n};\n\ncommands.list.forEach(addCommand);\n\nmodule.exports = addCommand;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}